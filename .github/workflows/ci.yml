# 🚀 Otogram CI/CD Pipeline
# Modern CI/CD for personal Telegram automation project
# Optimized for single maintainer workflow

name: CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 🧹 Code Quality Check
  quality:
    name: "🔍 Code Quality"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "📦 Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: "🎨 Check Code Formatting (Black)"
      run: |
        black --check --diff src/ scripts/ main.py

    - name: "📋 Check Import Sorting (isort)"
      run: |
        isort --check-only --diff src/ scripts/ main.py

    - name: "🔍 Type Checking (MyPy)"
      run: |
        mypy src/ --ignore-missing-imports

    - name: "🛡️ Security Scan (Bandit)"
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium

    - name: "📊 Upload Security Report"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # 🧪 Health Check & Tests
  test:
    name: "🧪 Tests & Health Check"
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ping: 1}).ok' || mongo --quiet --eval 'db.runCommand({ping: 1}).ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "📦 Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: "🩺 System Health Check"
      run: |
        python scripts/health_check.py
      env:
        MONGO_URL: mongodb://localhost:27017
        TEST_MODE: true

    - name: "🧪 Run Unit Tests"
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80
      env:
        MONGO_URL: mongodb://localhost:27017
        TEST_MODE: true

    - name: "📊 Upload Coverage Reports"
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: otogram-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # 🔒 Dependency Security Scan
  security:
    name: "🔒 Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: "🔍 Dependency Vulnerability Check"
      run: |
        python -m pip install --upgrade pip safety
        pip freeze > requirements-check.txt
        safety check -r requirements-check.txt --json --output safety-report.json || true
        safety check -r requirements-check.txt

    - name: "📊 Upload Safety Report"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json
        retention-days: 30

  # 🏗️ Build Verification
  build:
    name: "🏗️ Build Check"
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: "🔨 Build Package"
      run: |
        python -m pip install --upgrade pip build twine
        python -m build

    - name: "✅ Verify Package"
      run: |
        python -m twine check dist/*

    - name: "📦 Upload Build Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 7

  # 📚 Documentation Check
  docs:
    name: "📚 Documentation"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "📋 Check Required Files"
      run: |
        echo "📚 Verifying essential documentation..."
        files=("README.md" "LICENSE" "docs/CONTRIBUTING.md" "docs/CODE_OF_CONDUCT.md" "docs/SECURITY.md" "docs/SETUP_GUIDE.md")
        
        for file in "${files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file found"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

    - name: "🔍 Validate Documentation Content"
      run: |
        echo "🔍 Checking documentation quality..."
        
        # Check README has essential sections
        grep -q "Otogram" README.md || (echo "❌ README missing project name"; exit 1)
        grep -q "Installation" README.md || (echo "❌ README missing installation guide"; exit 1)
        grep -q "Usage" README.md || (echo "❌ README missing usage guide"; exit 1)
        
        echo "✅ Documentation validation passed"

  # ✅ All Checks Status
  ci-success:
    name: "✅ CI Success"
    runs-on: ubuntu-latest
    needs: [quality, test, security, build, docs]
    if: always()
    
    steps:
    - name: "🎉 All Checks Passed"
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' && needs.docs.result == 'success' }}
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Code Quality: ${{ needs.quality.result }}"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Build: ${{ needs.build.result }}"
        echo "✅ Documentation: ${{ needs.docs.result }}"

    - name: "❌ Some Checks Failed"
      if: ${{ needs.quality.result != 'success' || needs.test.result != 'success' || needs.security.result != 'success' || needs.build.result != 'success' || needs.docs.result != 'success' }}
      run: |
        echo "❌ Some CI checks failed:"
        echo "Code Quality: ${{ needs.quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Documentation: ${{ needs.docs.result }}"
        exit 1