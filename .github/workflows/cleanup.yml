# 🧹 Repository Cleanup for Otogram
# Automated cleanup tasks to maintain repository health

name: "🧹 Repository Cleanup"

on:
  schedule:
    # Run monthly on the 1st at 4 AM UTC
    - cron: '0 4 1 * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  actions: write

jobs:
  cleanup-artifacts:
    name: "🗑️ Cleanup Old Artifacts"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: "🗑️ Delete Old Workflow Artifacts"
      uses: actions/delete-package-versions@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
        package-type: 'container'
        # Keep artifacts for 30 days
        min-versions-to-keep: 5
        delete-only-untagged-versions: true

    - name: "📊 Cleanup Old Action Runs"
      uses: actions/github-script@v7
      with:
        script: |
          // Get workflow runs older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          for (const workflow of workflows.workflows) {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              status: 'completed',
              per_page: 100,
            });
            
            for (const run of runs.workflow_runs) {
              const runDate = new Date(run.created_at);
              if (runDate < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  console.log(`Deleted workflow run: ${run.id}`);
                } catch (error) {
                  console.log(`Could not delete run ${run.id}: ${error.message}`);
                }
              }
            }
          }

  cleanup-branches:
    name: "🌿 Cleanup Merged Branches"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🌿 Delete Merged Branches"
      run: |
        echo "🌿 Cleaning up merged branches..."
        
        # Get list of merged branches (excluding main, develop, and active PRs)
        merged_branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin | \
          grep -v -E '^(origin/main|origin/develop|origin/HEAD)$' | \
          while read branch; do
            local_branch=${branch#origin/}
            if git merge-base --is-ancestor $branch origin/main 2>/dev/null; then
              echo $local_branch
            fi
          done)
        
        if [ -z "$merged_branches" ]; then
          echo "✅ No merged branches to clean up"
          exit 0
        fi
        
        echo "🗑️ Branches to delete:"
        echo "$merged_branches"
        
        # Delete merged branches (this is a dry run - uncomment to actually delete)
        # for branch in $merged_branches; do
        #   git push origin --delete $branch || true
        #   echo "Deleted branch: $branch"
        # done
        
        echo "ℹ️  Dry run completed. Uncomment lines in workflow to actually delete branches."

  security-cleanup:
    name: "🔒 Security Cleanup"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:  
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🔍 Check for Sensitive Files"
      run: |
        echo "🔍 Scanning for potentially sensitive files..."
        
        # Check for common sensitive file patterns
        sensitive_files=$(find . -type f \( \
          -name "*.pem" -o \
          -name "*.key" -o \
          -name "*.p12" -o \
          -name "*.pfx" -o \
          -name "*secrets*" -o \
          -name "*credentials*" -o \
          -name "*.env" \
        \) | grep -v ".env.example" | grep -v ".github" || true)
        
        if [ -n "$sensitive_files" ]; then
          echo "⚠️  Found potentially sensitive files:"
          echo "$sensitive_files"
          echo ""
          echo "Please verify these files should be in the repository"
        else
          echo "✅ No sensitive files found"
        fi

    - name: "📋 Generate Cleanup Report"
      run: |
        echo "📋 Monthly Cleanup Report - $(date)" > cleanup-report.md
        echo "=================================" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "## 🧹 Cleanup Tasks Completed:" >> cleanup-report.md
        echo "- ✅ Old workflow artifacts cleaned" >> cleanup-report.md
        echo "- ✅ Old workflow runs removed (30+ days)" >> cleanup-report.md
        echo "- ✅ Merged branches identified (dry run)" >> cleanup-report.md
        echo "- ✅ Security scan completed" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "## 📊 Repository Health:" >> cleanup-report.md
        echo "- Total workflows: $(find .github/workflows -name '*.yml' | wc -l)" >> cleanup-report.md
        echo "- Active branches: $(git branch -r | wc -l)" >> cleanup-report.md
        echo "- Latest commit: $(git log -1 --pretty=format:'%h - %s (%cr)')" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "Generated by automated cleanup workflow 🤖" >> cleanup-report.md

    - name: "📊 Upload Cleanup Report"
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-report-${{ github.run_number }}
        path: cleanup-report.md
        retention-days: 90