# 🚀 Automated Release Workflow for Otogram
# Handles semantic versioning and automated releases

name: "🚀 Release"

on:
  push:
    tags: [ 'v*' ]

permissions:
  contents: write

jobs:
  release:
    name: "📦 Create Release"
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 15

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: "📦 Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: "🧪 Final Health Check"
      run: |
        python scripts/health_check.py
      env:
        TEST_MODE: true

    - name: "🏗️ Build Package"
      run: |
        python -m pip install build
        python -m build

    - name: "📝 Generate Release Notes"
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes
        echo "## 🚀 Otogram v$VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "### What's New" >> release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "**Changes since $PREV_TAG:**" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"* %s" $PREV_TAG..HEAD >> release_notes.md
        else
          echo "**Initial Release:**" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"* %s" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo 'git clone https://github.com/dygje/Otogram.git' >> release_notes.md
        echo 'cd Otogram' >> release_notes.md
        echo 'pip install -e ".[dev]"' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "📚 **Documentation:** [Setup Guide](https://github.com/dygje/Otogram/blob/main/docs/SETUP_GUIDE.md)" >> release_notes.md

    - name: "🎉 Create GitHub Release"
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: "Otogram v${{ steps.release_notes.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Notify on successful release
  notify:
    name: "📢 Release Notification"
    runs-on: ubuntu-latest
    needs: release
    if: success()
    
    steps:
    - name: "✅ Release Success"
      run: |
        echo "🎉 Otogram release completed successfully!"
        echo "Version: ${GITHUB_REF#refs/tags/v}"
        echo "Check: https://github.com/dygje/Otogram/releases/latest"