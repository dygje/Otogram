[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "otogram"
version = "2.0.2"
description = "Advanced Telegram automation system with intelligent blacklist management and comprehensive bot interface"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "dygje", email = "dygje@example.com"}
]
maintainers = [
    {name = "dygje", email = "dygje@example.com"}
]
keywords = ["telegram", "automation", "bot", "mass-messaging", "pyrofork", "mtproto"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
    "Natural Language :: English",
]
requires-python = ">=3.11"
dependencies = [
    # Telegram Libraries
    "pyrofork==2.3.68",
    "python-telegram-bot==20.8",
    "TgCrypto==1.2.5",
    
    # Database
    "motor==3.7.0",
    "pymongo==4.11.0",
    
    # Background Tasks & Scheduling
    "apscheduler==3.11.0",
    
    # Core Dependencies
    "python-dotenv==1.0.0",
    "pydantic==2.8.2",
    "pydantic-settings==2.4.0",
    "loguru==0.7.2",
    "aiofiles==24.1.0",
    
    # Utilities
    "python-dateutil==2.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    
    # Code Quality
    "ruff>=0.1.15",
    "mypy>=1.8.0",
    
    # Security
    "bandit>=1.7.5",
    "safety>=3.0.0",
    
    # Git Hooks
    "pre-commit>=3.6.0",
]

all = ["otogram[dev]"]

[project.urls]
Homepage = "https://github.com/dygje/Otogram"
Documentation = "https://github.com/dygje/Otogram/blob/main/README.md"
Repository = "https://github.com/dygje/Otogram.git"
Issues = "https://github.com/dygje/Otogram/issues"
Changelog = "https://github.com/dygje/Otogram/blob/main/docs/CHANGELOG.md"
"Source Code" = "https://github.com/dygje/Otogram"
"Bug Reports" = "https://github.com/dygje/Otogram/issues?q=is%3Aissue+is%3Aopen+label%3Abug"
"Feature Requests" = "https://github.com/dygje/Otogram/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement"

[project.scripts]
otogram = "main:main"
otogram-health = "scripts.health_check:main"
otogram-setup = "scripts.setup:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*", "build*", "dist*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml", "*.json"]

# Ruff linting and formatting
[tool.ruff]
line-length = 100
src = ["src", "scripts", "tests"]
target-version = "py311"

[tool.ruff.lint]
# Enable rules for personal project (more lenient than enterprise)
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]

# Ignore rules that are overkill for personal projects
ignore = [
    "ARG002",   # Unused method argument (common in event handlers)
    "PLR2004",  # Magic value used in comparison (OK for small projects)
    "RUF001",   # String contains ambiguous unicode (emojis are fine in UI)
    "B008",     # Do not perform function calls in argument defaults
    "E501",     # Line too long (handled by formatter)
    "W293",     # Blank line contains whitespace (handled by formatter)
    "E203",     # Whitespace before ':' (conflicts with black)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "PLR2004", "S101"]  # Allow unused args and magic values in tests
"scripts/*" = ["T201", "PLR2004"]           # Allow print statements and magic values in scripts

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
    | \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "scripts", "tests"]
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "pyrofork.*",
    "pyrogram.*",
    "telegram.*", 
    "motor.*",
    "apscheduler.*",
    "TgCrypto.*",
    "loguru.*",
    "pydantic_settings.*",
    "pytest_asyncio.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "telegram: marks tests that require Telegram credentials",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "build/*",
    "dist/*",
    "src/__init__.py",
    "src/*/__init__.py",
    "src/telegram/handlers/*",  # Handler modules can be tested later with integration tests
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]