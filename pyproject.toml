[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "otogram"
version = "2.0.5"
description = "Personal Telegram automation system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "dygje"}
]
keywords = ["telegram", "automation", "bot", "personal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License", 
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Environment :: Console",
]
requires-python = ">=3.11"
dependencies = [
    # Telegram Libraries
    "pyrofork>=2.3.68",
    "python-telegram-bot>=21.0",
    "TgCrypto>=1.2.5",
    
    # Database
    "motor>=3.7.1",
    "pymongo>=4.14.1",
    
    # Background Tasks & Scheduling
    "apscheduler>=3.11.0",
    
    # Core Dependencies
    "python-dotenv>=1.0.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.4.0",
    "loguru>=0.7.3",
    "aiofiles>=24.1.0",
    
    # Utilities
    "python-dateutil>=2.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing - Essential only
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    
    # Code Quality - Core tools
    "ruff>=0.1.15",
    "mypy>=1.8.0",
]

# Optional security tools (install separately if needed)
security = [
    "bandit>=1.7.5",
    "safety>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/dygje/Otogram"
Repository = "https://github.com/dygje/Otogram.git"
Issues = "https://github.com/dygje/Otogram/issues"

[project.scripts]
otogram = "main:main"
otogram-health = "scripts.health_check:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*", "build*", "dist*"]

# MyPy - Personal project friendly
[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false      # Relaxed for personal project
disallow_incomplete_defs = false    # Relaxed for personal project
check_untyped_defs = true
strict_optional = false             # Less strict for personal use

[[tool.mypy.overrides]]
module = [
    "pyrofork.*",
    "pyrogram.*",
    "telegram.*", 
    "motor.*",
    "apscheduler.*",
    "TgCrypto.*",
    "loguru.*",
    "pydantic_settings.*",
    "pytest_asyncio.*",
]
ignore_missing_imports = true

# Pytest - Personal project optimized
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-fail-under=15",    # Realistic for personal project
]
asyncio_mode = "auto"

# Coverage - Relaxed for personal development
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "build/*",
    "dist/*",
    "src/__init__.py",
    "src/*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "except.*Exception",      # Don't require exception coverage
    "pass",                   # Don't require pass statement coverage
]
show_missing = true
precision = 1