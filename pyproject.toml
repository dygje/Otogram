[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "telegram-automation-system"
version = "2.0.0"
description = "Telegram automation system with mass messaging and bot management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Telegram Automation System Contributors"}
]
keywords = ["telegram", "automation", "bot", "mass-messaging", "pyrogram"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    # Telegram Libraries
    "pyrogram==2.0.106",
    "python-telegram-bot==20.8",
    "TgCrypto==1.2.5",
    # Database
    "motor==3.7.0",
    "pymongo==4.11.0",
    # Background Tasks
    "apscheduler==3.11.0",
    # Core Dependencies
    "python-dotenv==1.0.0",
    "pydantic==2.8.2",
    "pydantic-settings==2.4.0",
    "loguru==0.7.2",
    "aiofiles==24.1.0",
    # Utils
    "python-dateutil==2.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/telegram-automation-system"
Documentation = "https://github.com/your-org/telegram-automation-system/tree/main/docs"
Repository = "https://github.com/your-org/telegram-automation-system"
Issues = "https://github.com/your-org/telegram-automation-system/issues"
Changelog = "https://github.com/your-org/telegram-automation-system/blob/main/docs/CHANGELOG.md"

[project.scripts]
telegram-automation = "main:main"
health-check = "scripts.health_check:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
    | \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "scripts", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyrogram.*",
    "telegram.*",
    "motor.*",
    "apscheduler.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]