[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "otogram"
version = "2.0.2"
description = "Personal Telegram automation system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "dygje", email = "dygje@example.com"}
]
keywords = ["telegram", "automation", "bot", "personal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License", 
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Environment :: Console",
]
requires-python = ">=3.11"
dependencies = [
    # Telegram Libraries
    "pyrofork==2.3.68",
    "python-telegram-bot==20.8",
    "TgCrypto==1.2.5",
    
    # Database
    "motor==3.7.0",
    "pymongo==4.11.0",
    
    # Background Tasks & Scheduling
    "apscheduler==3.11.0",
    
    # Core Dependencies
    "python-dotenv==1.0.0",
    "pydantic==2.8.2",
    "pydantic-settings==2.4.0",
    "loguru==0.7.2",
    "aiofiles==24.1.0",
    
    # Utilities
    "python-dateutil==2.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    
    # Code Quality
    "ruff>=0.1.15",
    "mypy>=1.8.0",
    
    # Security (optional for personal project)
    "bandit>=1.7.5",
    "safety>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/dygje/Otogram"
Repository = "https://github.com/dygje/Otogram.git"
Issues = "https://github.com/dygje/Otogram/issues"

[project.scripts]
otogram = "main:main"
otogram-health = "scripts.health_check:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*", "build*", "dist*"]

# Ruff configuration in ruff.toml file

# MyPy - relaxed for personal project
[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false      # Relaxed for personal project
disallow_incomplete_defs = false    # Relaxed for personal project
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "pyrofork.*",
    "pyrogram.*",
    "telegram.*", 
    "motor.*",
    "apscheduler.*",
    "TgCrypto.*",
    "loguru.*",
    "pydantic_settings.*",
    "pytest_asyncio.*",
]
ignore_missing_imports = true

# Pytest - simplified for personal project
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-fail-under=60",    # Lowered from 80% for personal project
]
asyncio_mode = "auto"

# Coverage - relaxed requirements
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "build/*",
    "dist/*",
    "src/__init__.py",
    "src/*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 1

# Bandit - minimal security for personal project
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]    # Skip assert and shell usage (ok for personal)